"""
Задание 1.
Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init()__),
который должен принимать данные (список списков) для формирования матрицы.
[[], [], []]
Следующий шаг — реализовать перегрузку метода __str()__ для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода __add()__ для реализации операции
сложения двух объектов класса Matrix (двух матриц).
Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно —
первый элемент первой строки первой матрицы складываем
с первым элементом первой строки второй матрицы и т.д.
Пример:
1 2 3
4 5 6
7 8 9
1 2 3
4 5 6
7 8 9
Сумма матриц:
2 4 6
8 10 12
14 16 18
"""


class Matrix:
    """Класс Matrix, с конструктором и двумя методами"""

    def __init__(self):
        """Конструктор"""
        self.mat_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

    def __str__(self, in_list=None):
        """вывод матрицы в привычном виде"""
        in_list = in_list if in_list is not None else self.mat_list
        str_result = ''
        for li in in_list:
            for el in li:
                str_result += str(el) + ' '
            str_result += '\n'
        return str_result

    def __add__(self, other):
        """Сложение матриц"""
        list_res1 = []
        list_res2 = []
        i = 0
        while i < len(self.mat_list):
            x = 0
            while x < len(self.mat_list[i]):
                list_res1.append(self.mat_list[i][x] + other[i][x])
                x = x + 1
            list_res2.append(list_res1)
            list_res1 = []
            i = i + 1

        return list_res2


a = Matrix()
b = Matrix()

print(a)
# 1 2 3
# 4 5 6
# 7 8 9

print(b)
# 1 2 3
# 4 5 6
# 7 8 9

print(a.__str__(a.__add__(b.mat_list)))
# 2 4 6
# 8 10 12
# 14 16 18


"""
Задание 2.
Реализовать проект расчета суммарного расхода ткани на производство одежды.
Единственный класс этого проекта — одежда (класс Clothes).
К типам одежды в этом проекте относятся пальто и костюм.
У этих типов одежды существуют параметры:
размер (для пальто) и рост (для костюма). Это могут быть обычные числа: v и h, соответственно.
Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (v/6.5 + 0.5),
для костюма (2*h + 0.3). Проверить работу этих методов на реальных данных.
Реализовать общий подсчет расхода ткани.
Проверить на практике полученные на этом уроке знания: реализовать
абстрактный класс для единственного класса проекта,
проверить на практике работу декоратора @property
Пример:
Расход ткани на пальто = 1.27
Расход ткани на костюм = 20.30
Общий расход ткани = 21.57
Два класса: абстрактный и Clothes
"""

from abc import ABC, abstractmethod


class AbstractClothes(ABC):
    """Абстрактный класс с 2 абстрактными методами и заготовкой для свойства"""

    @abstractmethod
    def get_coat_calc(self):
        """ Заготовка для расчета материалов на пальто"""
        pass

    @abstractmethod
    def get_suit_calc(self):
        """Заготовка для расчета материалов на костюм"""
        pass

    def get_total_calc(self):
        """Заготовка для суммы всех материалов на пальто и костюм"""
        pass


class Clothes(AbstractClothes):
    """Класс, наследующий абстрактный класс"""

    def __init__(self, v, h):
        self.v = v
        self.h = h
        self.coat_costs = self.v / 6.5 + 0.5
        self.suit_costs = self.h * 2 + 0.3

    def get_coat_calc(self):
        return str(f"Объем ткани на пальто: {self.coat_costs:.2f}")

    def get_suit_calc(self):
        return str(f"Объем ткани на костюм: {self.suit_costs:.2f}")

    @property
    def get_total_calc(self):
        return str(f"Общий объем тканей: {self.coat_costs + self.suit_costs:.2f}")


clothes = Clothes(5, 10)

print(clothes.get_coat_calc())
print(clothes.get_suit_calc())
print(clothes.get_total_calc)

"""
Задание 3.
Реализовать программу работы с органическими клетками, состоящими из ячеек.
Необходимо создать класс Клетка (Cell).
В его конструкторе инициализировать параметр (quantity),
соответствующий количеству ячеек клетки (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов:
сложение (add()),
вычитание (sub()),
умножение (mul()),
деление (truediv()).
Данные методы должны применяться только к клеткам и выполнять увеличение,
уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
Сложение. Объединение двух клеток.
При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
Вычитание. Участвуют две клетки.
Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
иначе выводить соответствующее сообщение.
Умножение. Создается общая клетка из двух.
Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
Деление. Создается общая клетка из двух.
Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
** - По желанию: В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****...,
где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n*****.
Подсказка: подробный список операторов для перегрузки доступен по ссылке.
------------------------------------------------------------------------------
Пример клиентского кода:
print("Создаем объекты клеток")
cell1 = Cell(30)
cell2 = Cell(25)
cell3 = Cell(10)
cell4 = Cell(15)
print()
print("Складываем")
print(cell1 + cell2)
print()
print("Вычитаем")
print(cell2 - cell1)
print(cell4 - cell3)
print()
print("Умножаем")
print(cell2 * cell1)
print()
print("Делим")
print(cell1 / cell2)
print()
print("Организация ячеек по рядам")
print(cell1.make_order(5))
print(cell2.make_order(10))
------------------------------------------------------------------------------
Результаты:
Создаем объекты клеток
Складываем
Сумма клеток = (55)
Вычитаем
Разность отрицательна, поэтому операция не выполняется
Разность клеток = (5)
Умножаем
Умножение клеток = (750)
Делим
Деление клеток = (1)
Организация ячеек по рядам
*****\n *****\n *****\n *****\n *****\n *****\n
**********\n **********\n *****
"""


class Cell:
    """Класс для работы с клетками"""

    def __init__(self, count):
        """Конструктор"""
        self.order = None
        self.quantity = count  # количество ячеек клетки

    def __add__(self, other):
        return f"Сумма клеток: {str(self.quantity + other.quantity)}"

    def __sub__(self, other):
        if self.quantity - other.quantity > 0:
            return f"Разность клеток: {str(self.quantity - other.quantity)}"
        else:
            return "Отрицательное число"

    def __mul__(self, other):
        return f"Умножение клеток: {int(self.quantity * other.quantity)}"

    def __truediv__(self, other):
        return f"Деление клеток: {self.quantity // self.quantity}"

    def make_order(self, order):
        self.order = order
        rows = ''
        i = 0
        while i < int(self.quantity / order):
            rows += '*' * order + '\n'
            i = i + 1
        rows += "*" * (self.quantity % order)

        return rows


cell1 = Cell(30)
cell2 = Cell(25)
cell3 = Cell(10)
cell4 = Cell(15)

# Складываем
print(cell1 + cell2)  # Сумма клеток: 55

# Вычитаем
print(cell2 - cell1)  # Отрицательное число
print(cell4 - cell3)  # Разность клеток: 5

# Умножаем
print(cell2 * cell1)  # Умножение клеток: 750

# Делим
print(cell1 / cell2)  # Деление клеток: 1

print(cell2.make_order(4))
"""
****
****
****
****
****
****
*
"""
