"""
1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
"""

int_1 = float(input("Укажите первое число, которое хотите разделить: "))
int_2 = float(input("Укажите второе число, на которое хотите разделить: "))


def func_div(var_1, var_2):
    """
    Возвращает результат деления двух чисел, либо сообщение, если второе число будет равно 0

    :param var_1: делимое число
    :param var_2: число-делитель
    :return: результат деления, либо сообщение в случае ввода числа 0
    """
    return var_1 / var_2 if (var_2 > 0) else "Делить на ноль нельзя"


print(func_div(int_1, int_2))

"""
2. Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя:
имя, фамилия, год рождения, город проживания, email, телефон.
Функция должна принимать параметры как именованные аргументы.
Осуществить вывод данных о пользователе одной строкой.
"""


def func_user_data(**kwargs):
    """
    Принимает 6 аргументов и выводит их в сообщение одной строкой.
    Поскольку именованных входящих аргументов много, используется конструкция **kwargs

    :param kwargs: словарь с аргументами: name, surname, birth, place, email, phone
    :print(kwargs):
    """
    print(f"имя: {kwargs.get('name')}, фамилия: {kwargs.get('surname')}, "
          f"год рождения: {kwargs.get('birth')}, город проживания: {kwargs.get('place')}, "
          f"email: {kwargs.get('email')}, Телефон: {kwargs.get('phone')}")


user_name = input("Введите имя: ")
user_surname = input("Введите фамилию: ")
user_birth = input("Введите год рождения: ")
user_place = input("Введите город проживания: ")
user_email = input("Введите адрес email: ")
user_phone = input("Введите телефон: ")

func_user_data(name=user_name, surname=user_surname, birth=user_birth,
               place=user_place, email=user_email, phone=user_phone)

"""
3. Реализовать функцию my_func(), которая принимает три позиционных аргумента и
возвращает сумму наибольших двух аргументов.
"""


def my_func(var_1, var_2, var_3):
    """
    Принимает три позиционных аргумента и возвращает сумму наибольших двух из них

    (number, number, number) -> number
    (string, string, string) -> string

    my_func(1, 2, 3)
    5
    my_func('a', 'bb', 'ccc')
    'bbccc'
    """
    args = [var_1, var_2, var_3]
    sort_args = sorted(args)

    return sort_args[-1] + sort_args[-2]


"""
4. Программа принимает действительное положительное число x и целое отрицательное число y. 
Выполните возведение числа x в степень y. Задание реализуйте в виде функции my_func(x, y).
При решении задания нужно обойтись без встроенной функции возведения числа в степень.
"""


# Первый вариант решения задачи, с оператором **:
def func_expo_1(x, y):
    """
    Возведение числа x в отрицательную степень y.
    Например: 6 в степени -2 равен 1/36 -> 0.027777777777777776

    (number, -number) -> number

    my_func(6, -2)
    0.027777777777777776
    """
    return 1 / x ** -y


# Второй вариант решения задачи, с циклом:
def func_expo_2(x, y):
    """
    Возведение числа x в отрицательную степень y.
    Например: 6 в степени -2 равен 1/36 -> 0.027777777777777776

    (number, -number) -> number

    my_func(6, -2)
    0.027777777777777776
    """
    res = x
    for i in range(-y - 1):
        res = res * x

    return 1 / res


"""
5. Программа запрашивает у пользователя строку чисел, разделённых пробелом.
При нажатии Enter должна выводиться сумма чисел.
Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter.
Сумма вновь введённых чисел будет добавляться к уже подсчитанной сумме.
Но если вместо числа вводится специальный символ, выполнение программы завершается.
Если специальный символ введён после нескольких чисел, то вначале нужно добавить сумму
этих чисел к полученной ранее сумме и после этого завершить программу.
"""

res_sum = 0
stop_progam = False


def func_sum():
    """
    Рекурсивная функция суммирования чисел, вводимых пользователем
    Для выхода из программы пользователь должен ввести символ q
    """

    global res_sum, stop_progam

    for el in input("Введите числа через пробел: ").split():
        if el == 'q':
            stop_progam = True
            break
        res_sum = res_sum + float(el)

    print(res_sum)

    return None if stop_progam else func_sum()


func_sum()

"""
6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв 
и возвращающую их же, но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
"""


# первый вариант решения задачи, подходит и для задания 7:
def int_func_1(string):
    """Применяет встроенную функцию .title() к входящему аргументу"""
    return string.title()


# второй вариант решения задачи:
def int_func_2(string):
    """Делает первую букву полученной строки прописной"""
    return string[0].upper() + string[1:]


"""
7. Продолжить работу над заданием. В программу должна попадать строка из слов, разделённых пробелом.
Каждое слово состоит из латинских букв в нижнем регистре. Нужно сделать вывод исходной строки,
но каждое слово должно начинаться с заглавной буквы. Используйте написанную ранее функцию int_func().
"""


def int_func(string):
    """Делает первую букву прописной во всех словах во входящем агрументе, разделенных пробелом"""
    result = ''
    for el in string.split():
        result += el[0].upper() + el[1:] + ' '

    return result
